import telebot
from datetime import datetime
import database
from config import TOKEN, TIMEZONE
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone
from database import get_all_birthdays

bot = telebot.TeleBot(TOKEN)

# Initialization database
database.init_db()

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç, –∫–æ—Ç–∏–∫—É!ü•∞\n–Ø –±–æ—Ç, —è–∫–∞ –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –∑–∞–ø–∞–º º—è—Ç–∞—Ç–∏ –î–Ω—ñ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É –Ω–∞—à–æ–º—É —á–∞—Ç–∏–∫—É!üòò\n\n–î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–±–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É\n\n –∫–æ–º–∞–Ω–¥—É /add DD-MM nickname üòä\n\n–ê —Ç–∞–∫–æ–∂ —Ç–∏ –º–æ–∂–µ—à –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —É—Å—ñ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –î–Ω—ñ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ —á–∞—Ç–∏–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /all")

# Function: add new birthday
@bot.message_handler(commands=['add'])
def handle_reminder(message):
    try:
        _, date_str, nickname = message.text.split()
        # Parse date and add notify to database
        database.create_reminder(message.chat.id, message.from_user.id, nickname, date_str)
        bot.reply_to(message, "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!üòé")
    except Exception as e:
        bot.reply_to(message, "–ü–æ–º–∏–ª–æ—á–∫–∞ —Å—Ç–∞–ª–∞—Å—è!üò±\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: /add DD-MM nickname")

# Function: send notify
def send_reminders():
    for chat_id, nickname in database.get_reminders_for_today():
        bot.send_message(chat_id, f"–í–∞—É—É—É—É!ü§©ü§©ü§©\n–°—å–æ–≥–æ–¥–Ω—ñ –î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É –Ω–∞—à–æ–≥–æ –∫–æ—Ç–∏–∫–∞ {nickname}!ü•≥\n–í—ñ—Ç–∞—î–º–æ —É—Å—ñ–º —á–∞—Ç–∏–∫–æ–º! üéâ")

# Function: get all birthdates
@bot.message_handler(commands=['all'])
def send_all_birthdays(message):
    chat_id = message.chat.id
    birthdays_list = get_all_birthdays(chat_id)
    response = "–£—Å—ñ –î–Ω—ñ –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n\n"
    for name, date in birthdays_list:
        response += f"üéÇ {name}: {date}\n"
    bot.send_message(message.chat.id, response)

# Function: delete birthdate
@bot.message_handler(commands=['delete'])
def handle_delete_birthday(message):
    try:
        _, name = message.text.split(maxsplit=1)
        chat_id = message.chat.id
        database.delete_birthday(chat_id, name)
        bot.reply_to(message, f"–î–µ–Ω—å –ù–∞—Ä–æ–¥–∂–µ–Ω–Ω—è {name} –≤–∏–¥–∞–ª–µ–Ω–æüòì")
    except ValueError:
        bot.reply_to(message, "–ü–æ–∫–∞–∂–∏ –º–µ–Ω—ñ –∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–∑ –∑–∞–ø–∏—Å—ñ–≤ –∫–æ–º–∞–Ω–¥–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ\n/delete nickname")
    except Exception as e:
        bot.reply_to(message, f"–ü–æ–º–∏–ª–æ—á–∫–∞ —Å—Ç–∞–ª–∞—Å—è!üò±: {e}")

# Cron
scheduler = BackgroundScheduler()
scheduler.add_job(send_reminders, 'cron', hour=10, timezone=timezone(TIMEZONE))
scheduler.add_job(send_reminders, 'cron', hour=12, timezone=timezone(TIMEZONE))
scheduler.start()

if __name__ == '__main__':
    bot.infinity_polling()
